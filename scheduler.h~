/*
Universidade Federal Rural do Rio de Janeiro.
Instituto Multidisciplinar.
Departamento de Tecnologia e Linguagens.
Curso de Ciência da Computaćão.

Autores: Alexsander Andrade de Melo, Renan Gomes da Silva Sies e Ygor de Mello Canalli.
Data (última atualização): 22/02/2014

dL'essentiel est invisible pour les yeux
*/
    #ifndef SHEDULER_H
    #define SHEDULER_H
	
	#include <stdio.h>
	#include <stdlib.h>
	#include "list_struct.h"
	#include "core.h"


	#define WP 2 	//peso do critério prioridade na decisão do escalonador
	#define WSRT 1	//peso do critério SRT na decisão do escalonador
	#define WQ 2	//peso do critério quantum na decisão do escalonador

	#define QUANTUM 4 //tamanho do quantum

	#define SHEDULER_CRITERION(P, SRT, Q) (WP*P + WSRT*SRT - WQ*Q) / (WP + WSRT - WQ)
	#define SHEDULER_DECISION(CRITERION, AVG) CRITERION >= AVG
	#define CURRENT_QUANTUM(CURRENT_STEP) CURRENT_STEP % QUANTUM

	#define ROUND_ROB 0
	#define MY_POLICY 1

	void* scheduling(List*, List*, List*, List*, int);
	void makeBasicScheduling(Core*, List*, int);
	void makeSchedulingDueStatusJob(Core*, List*, List*, List*, int);
	void makeSchedulingGap(Core*, List*, int);
	Job* getGreatestCriterionJob(List*);
	float avgCriterion(List*);

#endif
